/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-20")
public class Assignment implements org.apache.thrift.TBase<Assignment, Assignment._Fields>, java.io.Serializable, Cloneable, Comparable<Assignment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Assignment");

  private static final org.apache.thrift.protocol.TField MASTER_CODE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("master_code_dir", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("node_host", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTOR_NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_node_port", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTOR_START_TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_start_time_secs", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField WORKER_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_resources", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROFILE_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("profile_requests", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssignmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssignmentTupleSchemeFactory());
  }

  private String master_code_dir; // required
  private Map<String,String> node_host; // optional
  private Map<List<Long>,NodeInfo> executor_node_port; // optional
  private Map<List<Long>,Long> executor_start_time_secs; // optional
  private Map<NodeInfo,WorkerResources> worker_resources; // optional
  private int version; // optional
  private List<ProfileRequest> profile_requests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MASTER_CODE_DIR((short)1, "master_code_dir"),
    NODE_HOST((short)2, "node_host"),
    EXECUTOR_NODE_PORT((short)3, "executor_node_port"),
    EXECUTOR_START_TIME_SECS((short)4, "executor_start_time_secs"),
    WORKER_RESOURCES((short)5, "worker_resources"),
    VERSION((short)6, "version"),
    PROFILE_REQUESTS((short)7, "profile_requests");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MASTER_CODE_DIR
          return MASTER_CODE_DIR;
        case 2: // NODE_HOST
          return NODE_HOST;
        case 3: // EXECUTOR_NODE_PORT
          return EXECUTOR_NODE_PORT;
        case 4: // EXECUTOR_START_TIME_SECS
          return EXECUTOR_START_TIME_SECS;
        case 5: // WORKER_RESOURCES
          return WORKER_RESOURCES;
        case 6: // VERSION
          return VERSION;
        case 7: // PROFILE_REQUESTS
          return PROFILE_REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NODE_HOST,_Fields.EXECUTOR_NODE_PORT,_Fields.EXECUTOR_START_TIME_SECS,_Fields.WORKER_RESOURCES,_Fields.VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MASTER_CODE_DIR, new org.apache.thrift.meta_data.FieldMetaData("master_code_dir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_HOST, new org.apache.thrift.meta_data.FieldMetaData("node_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXECUTOR_NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("executor_node_port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class))));
    tmpMap.put(_Fields.EXECUTOR_START_TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("executor_start_time_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WORKER_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("worker_resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerResources.class))));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROFILE_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("profile_requests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ProfileRequest"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Assignment.class, metaDataMap);
  }

  public Assignment() {
    this.node_host = new HashMap<String,String>();

    this.executor_node_port = new HashMap<List<Long>,NodeInfo>();

    this.executor_start_time_secs = new HashMap<List<Long>,Long>();

    this.worker_resources = new HashMap<NodeInfo,WorkerResources>();

    this.profile_requests = new ArrayList<ProfileRequest>();

  }

  public Assignment(
    String master_code_dir,
    List<ProfileRequest> profile_requests)
  {
    this();
    this.master_code_dir = master_code_dir;
    this.profile_requests = profile_requests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Assignment(Assignment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_master_code_dir()) {
      this.master_code_dir = other.master_code_dir;
    }
    if (other.is_set_node_host()) {
      Map<String,String> __this__node_host = new HashMap<String,String>(other.node_host);
      this.node_host = __this__node_host;
    }
    if (other.is_set_executor_node_port()) {
      Map<List<Long>,NodeInfo> __this__executor_node_port = new HashMap<List<Long>,NodeInfo>(other.executor_node_port.size());
      for (Map.Entry<List<Long>, NodeInfo> other_element : other.executor_node_port.entrySet()) {

        List<Long> other_element_key = other_element.getKey();
        NodeInfo other_element_value = other_element.getValue();

        List<Long> __this__executor_node_port_copy_key = new ArrayList<Long>(other_element_key);

        NodeInfo __this__executor_node_port_copy_value = new NodeInfo(other_element_value);

        __this__executor_node_port.put(__this__executor_node_port_copy_key, __this__executor_node_port_copy_value);
      }
      this.executor_node_port = __this__executor_node_port;
    }
    if (other.is_set_executor_start_time_secs()) {
      Map<List<Long>,Long> __this__executor_start_time_secs = new HashMap<List<Long>,Long>(other.executor_start_time_secs.size());
      for (Map.Entry<List<Long>, Long> other_element : other.executor_start_time_secs.entrySet()) {

        List<Long> other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        List<Long> __this__executor_start_time_secs_copy_key = new ArrayList<Long>(other_element_key);

        Long __this__executor_start_time_secs_copy_value = other_element_value;

        __this__executor_start_time_secs.put(__this__executor_start_time_secs_copy_key, __this__executor_start_time_secs_copy_value);
      }
      this.executor_start_time_secs = __this__executor_start_time_secs;
    }
    if (other.is_set_worker_resources()) {
      Map<NodeInfo,WorkerResources> __this__worker_resources = new HashMap<NodeInfo,WorkerResources>(other.worker_resources.size());
      for (Map.Entry<NodeInfo, WorkerResources> other_element : other.worker_resources.entrySet()) {

        NodeInfo other_element_key = other_element.getKey();
        WorkerResources other_element_value = other_element.getValue();

        NodeInfo __this__worker_resources_copy_key = new NodeInfo(other_element_key);

        WorkerResources __this__worker_resources_copy_value = new WorkerResources(other_element_value);

        __this__worker_resources.put(__this__worker_resources_copy_key, __this__worker_resources_copy_value);
      }
      this.worker_resources = __this__worker_resources;
    }
    this.version = other.version;
    if (other.is_set_profile_requests()) {
      List<ProfileRequest> __this__profile_requests = new ArrayList<ProfileRequest>(other.profile_requests.size());
      for (ProfileRequest other_element : other.profile_requests) {
        __this__profile_requests.add(other_element);
      }
      this.profile_requests = __this__profile_requests;
    }
  }

  public Assignment deepCopy() {
    return new Assignment(this);
  }

  @Override
  public void clear() {
    this.master_code_dir = null;
    this.node_host = new HashMap<String,String>();

    this.executor_node_port = new HashMap<List<Long>,NodeInfo>();

    this.executor_start_time_secs = new HashMap<List<Long>,Long>();

    this.worker_resources = new HashMap<NodeInfo,WorkerResources>();

    set_version_isSet(false);
    this.version = 0;
    this.profile_requests = new ArrayList<ProfileRequest>();

  }

  public String get_master_code_dir() {
    return this.master_code_dir;
  }

  public void set_master_code_dir(String master_code_dir) {
    this.master_code_dir = master_code_dir;
  }

  public void unset_master_code_dir() {
    this.master_code_dir = null;
  }

  /** Returns true if field master_code_dir is set (has been assigned a value) and false otherwise */
  public boolean is_set_master_code_dir() {
    return this.master_code_dir != null;
  }

  public void set_master_code_dir_isSet(boolean value) {
    if (!value) {
      this.master_code_dir = null;
    }
  }

  public int get_node_host_size() {
    return (this.node_host == null) ? 0 : this.node_host.size();
  }

  public void put_to_node_host(String key, String val) {
    if (this.node_host == null) {
      this.node_host = new HashMap<String,String>();
    }
    this.node_host.put(key, val);
  }

  public Map<String,String> get_node_host() {
    return this.node_host;
  }

  public void set_node_host(Map<String,String> node_host) {
    this.node_host = node_host;
  }

  public void unset_node_host() {
    this.node_host = null;
  }

  /** Returns true if field node_host is set (has been assigned a value) and false otherwise */
  public boolean is_set_node_host() {
    return this.node_host != null;
  }

  public void set_node_host_isSet(boolean value) {
    if (!value) {
      this.node_host = null;
    }
  }

  public int get_executor_node_port_size() {
    return (this.executor_node_port == null) ? 0 : this.executor_node_port.size();
  }

  public void put_to_executor_node_port(List<Long> key, NodeInfo val) {
    if (this.executor_node_port == null) {
      this.executor_node_port = new HashMap<List<Long>,NodeInfo>();
    }
    this.executor_node_port.put(key, val);
  }

  public Map<List<Long>,NodeInfo> get_executor_node_port() {
    return this.executor_node_port;
  }

  public void set_executor_node_port(Map<List<Long>,NodeInfo> executor_node_port) {
    this.executor_node_port = executor_node_port;
  }

  public void unset_executor_node_port() {
    this.executor_node_port = null;
  }

  /** Returns true if field executor_node_port is set (has been assigned a value) and false otherwise */
  public boolean is_set_executor_node_port() {
    return this.executor_node_port != null;
  }

  public void set_executor_node_port_isSet(boolean value) {
    if (!value) {
      this.executor_node_port = null;
    }
  }

  public int get_executor_start_time_secs_size() {
    return (this.executor_start_time_secs == null) ? 0 : this.executor_start_time_secs.size();
  }

  public void put_to_executor_start_time_secs(List<Long> key, long val) {
    if (this.executor_start_time_secs == null) {
      this.executor_start_time_secs = new HashMap<List<Long>,Long>();
    }
    this.executor_start_time_secs.put(key, val);
  }

  public Map<List<Long>,Long> get_executor_start_time_secs() {
    return this.executor_start_time_secs;
  }

  public void set_executor_start_time_secs(Map<List<Long>,Long> executor_start_time_secs) {
    this.executor_start_time_secs = executor_start_time_secs;
  }

  public void unset_executor_start_time_secs() {
    this.executor_start_time_secs = null;
  }

  /** Returns true if field executor_start_time_secs is set (has been assigned a value) and false otherwise */
  public boolean is_set_executor_start_time_secs() {
    return this.executor_start_time_secs != null;
  }

  public void set_executor_start_time_secs_isSet(boolean value) {
    if (!value) {
      this.executor_start_time_secs = null;
    }
  }

  public int get_worker_resources_size() {
    return (this.worker_resources == null) ? 0 : this.worker_resources.size();
  }

  public void put_to_worker_resources(NodeInfo key, WorkerResources val) {
    if (this.worker_resources == null) {
      this.worker_resources = new HashMap<NodeInfo,WorkerResources>();
    }
    this.worker_resources.put(key, val);
  }

  public Map<NodeInfo,WorkerResources> get_worker_resources() {
    return this.worker_resources;
  }

  public void set_worker_resources(Map<NodeInfo,WorkerResources> worker_resources) {
    this.worker_resources = worker_resources;
  }

  public void unset_worker_resources() {
    this.worker_resources = null;
  }

  /** Returns true if field worker_resources is set (has been assigned a value) and false otherwise */
  public boolean is_set_worker_resources() {
    return this.worker_resources != null;
  }

  public void set_worker_resources_isSet(boolean value) {
    if (!value) {
      this.worker_resources = null;
    }
  }

  public int get_version() {
    return this.version;
  }

  public void set_version(int version) {
    this.version = version;
    set_version_isSet(true);
  }

  public void unset_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean is_set_version() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void set_version_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int get_profile_requests_size() {
    return (this.profile_requests == null) ? 0 : this.profile_requests.size();
  }

  public java.util.Iterator<ProfileRequest> get_profile_requests_iterator() {
    return (this.profile_requests == null) ? null : this.profile_requests.iterator();
  }

  public void add_to_profile_requests(ProfileRequest elem) {
    if (this.profile_requests == null) {
      this.profile_requests = new ArrayList<ProfileRequest>();
    }
    this.profile_requests.add(elem);
  }

  public List<ProfileRequest> get_profile_requests() {
    return this.profile_requests;
  }

  public void set_profile_requests(List<ProfileRequest> profile_requests) {
    this.profile_requests = profile_requests;
  }

  public void unset_profile_requests() {
    this.profile_requests = null;
  }

  /** Returns true if field profile_requests is set (has been assigned a value) and false otherwise */
  public boolean is_set_profile_requests() {
    return this.profile_requests != null;
  }

  public void set_profile_requests_isSet(boolean value) {
    if (!value) {
      this.profile_requests = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MASTER_CODE_DIR:
      if (value == null) {
        unset_master_code_dir();
      } else {
        set_master_code_dir((String)value);
      }
      break;

    case NODE_HOST:
      if (value == null) {
        unset_node_host();
      } else {
        set_node_host((Map<String,String>)value);
      }
      break;

    case EXECUTOR_NODE_PORT:
      if (value == null) {
        unset_executor_node_port();
      } else {
        set_executor_node_port((Map<List<Long>,NodeInfo>)value);
      }
      break;

    case EXECUTOR_START_TIME_SECS:
      if (value == null) {
        unset_executor_start_time_secs();
      } else {
        set_executor_start_time_secs((Map<List<Long>,Long>)value);
      }
      break;

    case WORKER_RESOURCES:
      if (value == null) {
        unset_worker_resources();
      } else {
        set_worker_resources((Map<NodeInfo,WorkerResources>)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unset_version();
      } else {
        set_version((Integer)value);
      }
      break;

    case PROFILE_REQUESTS:
      if (value == null) {
        unset_profile_requests();
      } else {
        set_profile_requests((List<ProfileRequest>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MASTER_CODE_DIR:
      return get_master_code_dir();

    case NODE_HOST:
      return get_node_host();

    case EXECUTOR_NODE_PORT:
      return get_executor_node_port();

    case EXECUTOR_START_TIME_SECS:
      return get_executor_start_time_secs();

    case WORKER_RESOURCES:
      return get_worker_resources();

    case VERSION:
      return get_version();

    case PROFILE_REQUESTS:
      return get_profile_requests();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MASTER_CODE_DIR:
      return is_set_master_code_dir();
    case NODE_HOST:
      return is_set_node_host();
    case EXECUTOR_NODE_PORT:
      return is_set_executor_node_port();
    case EXECUTOR_START_TIME_SECS:
      return is_set_executor_start_time_secs();
    case WORKER_RESOURCES:
      return is_set_worker_resources();
    case VERSION:
      return is_set_version();
    case PROFILE_REQUESTS:
      return is_set_profile_requests();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Assignment)
      return this.equals((Assignment)that);
    return false;
  }

  public boolean equals(Assignment that) {
    if (that == null)
      return false;

    boolean this_present_master_code_dir = true && this.is_set_master_code_dir();
    boolean that_present_master_code_dir = true && that.is_set_master_code_dir();
    if (this_present_master_code_dir || that_present_master_code_dir) {
      if (!(this_present_master_code_dir && that_present_master_code_dir))
        return false;
      if (!this.master_code_dir.equals(that.master_code_dir))
        return false;
    }

    boolean this_present_node_host = true && this.is_set_node_host();
    boolean that_present_node_host = true && that.is_set_node_host();
    if (this_present_node_host || that_present_node_host) {
      if (!(this_present_node_host && that_present_node_host))
        return false;
      if (!this.node_host.equals(that.node_host))
        return false;
    }

    boolean this_present_executor_node_port = true && this.is_set_executor_node_port();
    boolean that_present_executor_node_port = true && that.is_set_executor_node_port();
    if (this_present_executor_node_port || that_present_executor_node_port) {
      if (!(this_present_executor_node_port && that_present_executor_node_port))
        return false;
      if (!this.executor_node_port.equals(that.executor_node_port))
        return false;
    }

    boolean this_present_executor_start_time_secs = true && this.is_set_executor_start_time_secs();
    boolean that_present_executor_start_time_secs = true && that.is_set_executor_start_time_secs();
    if (this_present_executor_start_time_secs || that_present_executor_start_time_secs) {
      if (!(this_present_executor_start_time_secs && that_present_executor_start_time_secs))
        return false;
      if (!this.executor_start_time_secs.equals(that.executor_start_time_secs))
        return false;
    }

    boolean this_present_worker_resources = true && this.is_set_worker_resources();
    boolean that_present_worker_resources = true && that.is_set_worker_resources();
    if (this_present_worker_resources || that_present_worker_resources) {
      if (!(this_present_worker_resources && that_present_worker_resources))
        return false;
      if (!this.worker_resources.equals(that.worker_resources))
        return false;
    }

    boolean this_present_version = true && this.is_set_version();
    boolean that_present_version = true && that.is_set_version();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_profile_requests = true && this.is_set_profile_requests();
    boolean that_present_profile_requests = true && that.is_set_profile_requests();
    if (this_present_profile_requests || that_present_profile_requests) {
      if (!(this_present_profile_requests && that_present_profile_requests))
        return false;
      if (!this.profile_requests.equals(that.profile_requests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_master_code_dir = true && (is_set_master_code_dir());
    list.add(present_master_code_dir);
    if (present_master_code_dir)
      list.add(master_code_dir);

    boolean present_node_host = true && (is_set_node_host());
    list.add(present_node_host);
    if (present_node_host)
      list.add(node_host);

    boolean present_executor_node_port = true && (is_set_executor_node_port());
    list.add(present_executor_node_port);
    if (present_executor_node_port)
      list.add(executor_node_port);

    boolean present_executor_start_time_secs = true && (is_set_executor_start_time_secs());
    list.add(present_executor_start_time_secs);
    if (present_executor_start_time_secs)
      list.add(executor_start_time_secs);

    boolean present_worker_resources = true && (is_set_worker_resources());
    list.add(present_worker_resources);
    if (present_worker_resources)
      list.add(worker_resources);

    boolean present_version = true && (is_set_version());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_profile_requests = true && (is_set_profile_requests());
    list.add(present_profile_requests);
    if (present_profile_requests)
      list.add(profile_requests);

    return list.hashCode();
  }

  @Override
  public int compareTo(Assignment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_master_code_dir()).compareTo(other.is_set_master_code_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_master_code_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master_code_dir, other.master_code_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_node_host()).compareTo(other.is_set_node_host());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_node_host()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_host, other.node_host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_executor_node_port()).compareTo(other.is_set_executor_node_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_executor_node_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_node_port, other.executor_node_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_executor_start_time_secs()).compareTo(other.is_set_executor_start_time_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_executor_start_time_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_start_time_secs, other.executor_start_time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_worker_resources()).compareTo(other.is_set_worker_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_worker_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_resources, other.worker_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_version()).compareTo(other.is_set_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_profile_requests()).compareTo(other.is_set_profile_requests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_profile_requests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile_requests, other.profile_requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Assignment(");
    boolean first = true;

    sb.append("master_code_dir:");
    if (this.master_code_dir == null) {
      sb.append("null");
    } else {
      sb.append(this.master_code_dir);
    }
    first = false;
    if (is_set_node_host()) {
      if (!first) sb.append(", ");
      sb.append("node_host:");
      if (this.node_host == null) {
        sb.append("null");
      } else {
        sb.append(this.node_host);
      }
      first = false;
    }
    if (is_set_executor_node_port()) {
      if (!first) sb.append(", ");
      sb.append("executor_node_port:");
      if (this.executor_node_port == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_node_port);
      }
      first = false;
    }
    if (is_set_executor_start_time_secs()) {
      if (!first) sb.append(", ");
      sb.append("executor_start_time_secs:");
      if (this.executor_start_time_secs == null) {
        sb.append("null");
      } else {
        sb.append(this.executor_start_time_secs);
      }
      first = false;
    }
    if (is_set_worker_resources()) {
      if (!first) sb.append(", ");
      sb.append("worker_resources:");
      if (this.worker_resources == null) {
        sb.append("null");
      } else {
        sb.append(this.worker_resources);
      }
      first = false;
    }
    if (is_set_version()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("profile_requests:");
    if (this.profile_requests == null) {
      sb.append("null");
    } else {
      sb.append(this.profile_requests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_master_code_dir()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'master_code_dir' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssignmentStandardSchemeFactory implements SchemeFactory {
    public AssignmentStandardScheme getScheme() {
      return new AssignmentStandardScheme();
    }
  }

  private static class AssignmentStandardScheme extends StandardScheme<Assignment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Assignment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MASTER_CODE_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.master_code_dir = iprot.readString();
              struct.set_master_code_dir_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map548 = iprot.readMapBegin();
                struct.node_host = new HashMap<String,String>(2*_map548.size);
                String _key549;
                String _val550;
                for (int _i551 = 0; _i551 < _map548.size; ++_i551)
                {
                  _key549 = iprot.readString();
                  _val550 = iprot.readString();
                  struct.node_host.put(_key549, _val550);
                }
                iprot.readMapEnd();
              }
              struct.set_node_host_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTOR_NODE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map552 = iprot.readMapBegin();
                struct.executor_node_port = new HashMap<List<Long>,NodeInfo>(2*_map552.size);
                List<Long> _key553;
                NodeInfo _val554;
                for (int _i555 = 0; _i555 < _map552.size; ++_i555)
                {
                  {
                    org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                    _key553 = new ArrayList<Long>(_list556.size);
                    long _elem557;
                    for (int _i558 = 0; _i558 < _list556.size; ++_i558)
                    {
                      _elem557 = iprot.readI64();
                      _key553.add(_elem557);
                    }
                    iprot.readListEnd();
                  }
                  _val554 = new NodeInfo();
                  _val554.read(iprot);
                  struct.executor_node_port.put(_key553, _val554);
                }
                iprot.readMapEnd();
              }
              struct.set_executor_node_port_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTOR_START_TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map559 = iprot.readMapBegin();
                struct.executor_start_time_secs = new HashMap<List<Long>,Long>(2*_map559.size);
                List<Long> _key560;
                long _val561;
                for (int _i562 = 0; _i562 < _map559.size; ++_i562)
                {
                  {
                    org.apache.thrift.protocol.TList _list563 = iprot.readListBegin();
                    _key560 = new ArrayList<Long>(_list563.size);
                    long _elem564;
                    for (int _i565 = 0; _i565 < _list563.size; ++_i565)
                    {
                      _elem564 = iprot.readI64();
                      _key560.add(_elem564);
                    }
                    iprot.readListEnd();
                  }
                  _val561 = iprot.readI64();
                  struct.executor_start_time_secs.put(_key560, _val561);
                }
                iprot.readMapEnd();
              }
              struct.set_executor_start_time_secs_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORKER_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map566 = iprot.readMapBegin();
                struct.worker_resources = new HashMap<NodeInfo,WorkerResources>(2*_map566.size);
                NodeInfo _key567;
                WorkerResources _val568;
                for (int _i569 = 0; _i569 < _map566.size; ++_i569)
                {
                  _key567 = new NodeInfo();
                  _key567.read(iprot);
                  _val568 = new WorkerResources();
                  _val568.read(iprot);
                  struct.worker_resources.put(_key567, _val568);
                }
                iprot.readMapEnd();
              }
              struct.set_worker_resources_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.set_version_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFILE_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list570 = iprot.readListBegin();
                struct.profile_requests = new ArrayList<ProfileRequest>(_list570.size);
                ProfileRequest _elem571;
                for (int _i572 = 0; _i572 < _list570.size; ++_i572)
                {
                  _elem571 = new ProfileRequest();
                  _elem571.read(iprot);
                  struct.profile_requests.add(_elem571);
                }
                iprot.readListEnd();
              }
              struct.set_profile_requests_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Assignment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.master_code_dir != null) {
        oprot.writeFieldBegin(MASTER_CODE_DIR_FIELD_DESC);
        oprot.writeString(struct.master_code_dir);
        oprot.writeFieldEnd();
      }
      if (struct.node_host != null) {
        if (struct.is_set_node_host()) {
          oprot.writeFieldBegin(NODE_HOST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.node_host.size()));
            for (Map.Entry<String, String> _iter573 : struct.node_host.entrySet())
            {
              oprot.writeString(_iter573.getKey());
              oprot.writeString(_iter573.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_node_port != null) {
        if (struct.is_set_executor_node_port()) {
          oprot.writeFieldBegin(EXECUTOR_NODE_PORT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, struct.executor_node_port.size()));
            for (Map.Entry<List<Long>, NodeInfo> _iter574 : struct.executor_node_port.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter574.getKey().size()));
                for (long _iter575 : _iter574.getKey())
                {
                  oprot.writeI64(_iter575);
                }
                oprot.writeListEnd();
              }
              _iter574.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.executor_start_time_secs != null) {
        if (struct.is_set_executor_start_time_secs()) {
          oprot.writeFieldBegin(EXECUTOR_START_TIME_SECS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, struct.executor_start_time_secs.size()));
            for (Map.Entry<List<Long>, Long> _iter576 : struct.executor_start_time_secs.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter576.getKey().size()));
                for (long _iter577 : _iter576.getKey())
                {
                  oprot.writeI64(_iter577);
                }
                oprot.writeListEnd();
              }
              oprot.writeI64(_iter576.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.worker_resources != null) {
        if (struct.is_set_worker_resources()) {
          oprot.writeFieldBegin(WORKER_RESOURCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.worker_resources.size()));
            for (Map.Entry<NodeInfo, WorkerResources> _iter578 : struct.worker_resources.entrySet())
            {
              _iter578.getKey().write(oprot);
              _iter578.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.is_set_version()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.profile_requests != null) {
        oprot.writeFieldBegin(PROFILE_REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profile_requests.size()));
          for (ProfileRequest _iter579 : struct.profile_requests)
          {
            _iter579.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssignmentTupleSchemeFactory implements SchemeFactory {
    public AssignmentTupleScheme getScheme() {
      return new AssignmentTupleScheme();
    }
  }

  private static class AssignmentTupleScheme extends TupleScheme<Assignment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.master_code_dir);
      BitSet optionals = new BitSet();
      if (struct.is_set_node_host()) {
        optionals.set(0);
      }
      if (struct.is_set_executor_node_port()) {
        optionals.set(1);
      }
      if (struct.is_set_executor_start_time_secs()) {
        optionals.set(2);
      }
      if (struct.is_set_worker_resources()) {
        optionals.set(3);
      }
      if (struct.is_set_version()) {
        optionals.set(4);
      }
      if (struct.is_set_profile_requests()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.is_set_node_host()) {
        {
          oprot.writeI32(struct.node_host.size());
          for (Map.Entry<String, String> _iter580 : struct.node_host.entrySet())
          {
            oprot.writeString(_iter580.getKey());
            oprot.writeString(_iter580.getValue());
          }
        }
      }
      if (struct.is_set_executor_node_port()) {
        {
          oprot.writeI32(struct.executor_node_port.size());
          for (Map.Entry<List<Long>, NodeInfo> _iter581 : struct.executor_node_port.entrySet())
          {
            {
              oprot.writeI32(_iter581.getKey().size());
              for (long _iter582 : _iter581.getKey())
              {
                oprot.writeI64(_iter582);
              }
            }
            _iter581.getValue().write(oprot);
          }
        }
      }
      if (struct.is_set_executor_start_time_secs()) {
        {
          oprot.writeI32(struct.executor_start_time_secs.size());
          for (Map.Entry<List<Long>, Long> _iter583 : struct.executor_start_time_secs.entrySet())
          {
            {
              oprot.writeI32(_iter583.getKey().size());
              for (long _iter584 : _iter583.getKey())
              {
                oprot.writeI64(_iter584);
              }
            }
            oprot.writeI64(_iter583.getValue());
          }
        }
      }
      if (struct.is_set_worker_resources()) {
        {
          oprot.writeI32(struct.worker_resources.size());
          for (Map.Entry<NodeInfo, WorkerResources> _iter585 : struct.worker_resources.entrySet())
          {
            _iter585.getKey().write(oprot);
            _iter585.getValue().write(oprot);
          }
        }
      }
      if (struct.is_set_version()) {
        oprot.writeI32(struct.version);
      }
      if (struct.is_set_profile_requests()) {
        {
          oprot.writeI32(struct.profile_requests.size());
          for (ProfileRequest _iter586 : struct.profile_requests)
          {
            _iter586.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Assignment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.master_code_dir = iprot.readString();
      struct.set_master_code_dir_isSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map587 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.node_host = new HashMap<String,String>(2*_map587.size);
          String _key588;
          String _val589;
          for (int _i590 = 0; _i590 < _map587.size; ++_i590)
          {
            _key588 = iprot.readString();
            _val589 = iprot.readString();
            struct.node_host.put(_key588, _val589);
          }
        }
        struct.set_node_host_isSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map591 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.executor_node_port = new HashMap<List<Long>,NodeInfo>(2*_map591.size);
          List<Long> _key592;
          NodeInfo _val593;
          for (int _i594 = 0; _i594 < _map591.size; ++_i594)
          {
            {
              org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _key592 = new ArrayList<Long>(_list595.size);
              long _elem596;
              for (int _i597 = 0; _i597 < _list595.size; ++_i597)
              {
                _elem596 = iprot.readI64();
                _key592.add(_elem596);
              }
            }
            _val593 = new NodeInfo();
            _val593.read(iprot);
            struct.executor_node_port.put(_key592, _val593);
          }
        }
        struct.set_executor_node_port_isSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map598 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.executor_start_time_secs = new HashMap<List<Long>,Long>(2*_map598.size);
          List<Long> _key599;
          long _val600;
          for (int _i601 = 0; _i601 < _map598.size; ++_i601)
          {
            {
              org.apache.thrift.protocol.TList _list602 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _key599 = new ArrayList<Long>(_list602.size);
              long _elem603;
              for (int _i604 = 0; _i604 < _list602.size; ++_i604)
              {
                _elem603 = iprot.readI64();
                _key599.add(_elem603);
              }
            }
            _val600 = iprot.readI64();
            struct.executor_start_time_secs.put(_key599, _val600);
          }
        }
        struct.set_executor_start_time_secs_isSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map605 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.worker_resources = new HashMap<NodeInfo,WorkerResources>(2*_map605.size);
          NodeInfo _key606;
          WorkerResources _val607;
          for (int _i608 = 0; _i608 < _map605.size; ++_i608)
          {
            _key606 = new NodeInfo();
            _key606.read(iprot);
            _val607 = new WorkerResources();
            _val607.read(iprot);
            struct.worker_resources.put(_key606, _val607);
          }
        }
        struct.set_worker_resources_isSet(true);
      }
      if (incoming.get(4)) {
        struct.version = iprot.readI32();
        struct.set_version_isSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list609 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.profile_requests = new ArrayList<ProfileRequest>(_list609.size);
          ProfileRequest _elem610;
          for (int _i611 = 0; _i611 < _list609.size; ++_i611)
          {
            _elem610 = new ProfileRequest();
            _elem610.read(iprot);
            struct.profile_requests.add(_elem610);
          }
        }
        struct.set_profile_requests_isSet(true);
      }
    }
  }

}

