/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-20")
public class WorkerJvmInfo implements org.apache.thrift.TBase<WorkerJvmInfo, WorkerJvmInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerJvmInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerJvmInfo");

  private static final org.apache.thrift.protocol.TField TOPOLOGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topologyId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerJvmInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerJvmInfoTupleSchemeFactory());
  }

  private String topologyId; // required
  private Map<String,Map<String,String>> value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPOLOGY_ID((short)1, "topologyId"),
    VALUE((short)2, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPOLOGY_ID
          return TOPOLOGY_ID;
        case 2: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPOLOGY_ID, new org.apache.thrift.meta_data.FieldMetaData("topologyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerJvmInfo.class, metaDataMap);
  }

  public WorkerJvmInfo() {
  }

  public WorkerJvmInfo(
    String topologyId,
    Map<String,Map<String,String>> value)
  {
    this();
    this.topologyId = topologyId;
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerJvmInfo(WorkerJvmInfo other) {
    if (other.is_set_topologyId()) {
      this.topologyId = other.topologyId;
    }
    if (other.is_set_value()) {
      Map<String,Map<String,String>> __this__value = new HashMap<String,Map<String,String>>(other.value.size());
      for (Map.Entry<String, Map<String,String>> other_element : other.value.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,String> other_element_value = other_element.getValue();

        String __this__value_copy_key = other_element_key;

        Map<String,String> __this__value_copy_value = new HashMap<String,String>(other_element_value);

        __this__value.put(__this__value_copy_key, __this__value_copy_value);
      }
      this.value = __this__value;
    }
  }

  public WorkerJvmInfo deepCopy() {
    return new WorkerJvmInfo(this);
  }

  @Override
  public void clear() {
    this.topologyId = null;
    this.value = null;
  }

  public String get_topologyId() {
    return this.topologyId;
  }

  public void set_topologyId(String topologyId) {
    this.topologyId = topologyId;
  }

  public void unset_topologyId() {
    this.topologyId = null;
  }

  /** Returns true if field topologyId is set (has been assigned a value) and false otherwise */
  public boolean is_set_topologyId() {
    return this.topologyId != null;
  }

  public void set_topologyId_isSet(boolean value) {
    if (!value) {
      this.topologyId = null;
    }
  }

  public int get_value_size() {
    return (this.value == null) ? 0 : this.value.size();
  }

  public void put_to_value(String key, Map<String,String> val) {
    if (this.value == null) {
      this.value = new HashMap<String,Map<String,String>>();
    }
    this.value.put(key, val);
  }

  public Map<String,Map<String,String>> get_value() {
    return this.value;
  }

  public void set_value(Map<String,Map<String,String>> value) {
    this.value = value;
  }

  public void unset_value() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean is_set_value() {
    return this.value != null;
  }

  public void set_value_isSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPOLOGY_ID:
      if (value == null) {
        unset_topologyId();
      } else {
        set_topologyId((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unset_value();
      } else {
        set_value((Map<String,Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPOLOGY_ID:
      return get_topologyId();

    case VALUE:
      return get_value();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPOLOGY_ID:
      return is_set_topologyId();
    case VALUE:
      return is_set_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerJvmInfo)
      return this.equals((WorkerJvmInfo)that);
    return false;
  }

  public boolean equals(WorkerJvmInfo that) {
    if (that == null)
      return false;

    boolean this_present_topologyId = true && this.is_set_topologyId();
    boolean that_present_topologyId = true && that.is_set_topologyId();
    if (this_present_topologyId || that_present_topologyId) {
      if (!(this_present_topologyId && that_present_topologyId))
        return false;
      if (!this.topologyId.equals(that.topologyId))
        return false;
    }

    boolean this_present_value = true && this.is_set_value();
    boolean that_present_value = true && that.is_set_value();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_topologyId = true && (is_set_topologyId());
    list.add(present_topologyId);
    if (present_topologyId)
      list.add(topologyId);

    boolean present_value = true && (is_set_value());
    list.add(present_value);
    if (present_value)
      list.add(value);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkerJvmInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_topologyId()).compareTo(other.is_set_topologyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_topologyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topologyId, other.topologyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_value()).compareTo(other.is_set_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerJvmInfo(");
    boolean first = true;

    sb.append("topologyId:");
    if (this.topologyId == null) {
      sb.append("null");
    } else {
      sb.append(this.topologyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_topologyId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topologyId' is unset! Struct:" + toString());
    }

    if (!is_set_value()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerJvmInfoStandardSchemeFactory implements SchemeFactory {
    public WorkerJvmInfoStandardScheme getScheme() {
      return new WorkerJvmInfoStandardScheme();
    }
  }

  private static class WorkerJvmInfoStandardScheme extends StandardScheme<WorkerJvmInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerJvmInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPOLOGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topologyId = iprot.readString();
              struct.set_topologyId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map712 = iprot.readMapBegin();
                struct.value = new HashMap<String,Map<String,String>>(2*_map712.size);
                String _key713;
                Map<String,String> _val714;
                for (int _i715 = 0; _i715 < _map712.size; ++_i715)
                {
                  _key713 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map716 = iprot.readMapBegin();
                    _val714 = new HashMap<String,String>(2*_map716.size);
                    String _key717;
                    String _val718;
                    for (int _i719 = 0; _i719 < _map716.size; ++_i719)
                    {
                      _key717 = iprot.readString();
                      _val718 = iprot.readString();
                      _val714.put(_key717, _val718);
                    }
                    iprot.readMapEnd();
                  }
                  struct.value.put(_key713, _val714);
                }
                iprot.readMapEnd();
              }
              struct.set_value_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerJvmInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topologyId != null) {
        oprot.writeFieldBegin(TOPOLOGY_ID_FIELD_DESC);
        oprot.writeString(struct.topologyId);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.value.size()));
          for (Map.Entry<String, Map<String,String>> _iter720 : struct.value.entrySet())
          {
            oprot.writeString(_iter720.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter720.getValue().size()));
              for (Map.Entry<String, String> _iter721 : _iter720.getValue().entrySet())
              {
                oprot.writeString(_iter721.getKey());
                oprot.writeString(_iter721.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerJvmInfoTupleSchemeFactory implements SchemeFactory {
    public WorkerJvmInfoTupleScheme getScheme() {
      return new WorkerJvmInfoTupleScheme();
    }
  }

  private static class WorkerJvmInfoTupleScheme extends TupleScheme<WorkerJvmInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerJvmInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.topologyId);
      {
        oprot.writeI32(struct.value.size());
        for (Map.Entry<String, Map<String,String>> _iter722 : struct.value.entrySet())
        {
          oprot.writeString(_iter722.getKey());
          {
            oprot.writeI32(_iter722.getValue().size());
            for (Map.Entry<String, String> _iter723 : _iter722.getValue().entrySet())
            {
              oprot.writeString(_iter723.getKey());
              oprot.writeString(_iter723.getValue());
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerJvmInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.topologyId = iprot.readString();
      struct.set_topologyId_isSet(true);
      {
        org.apache.thrift.protocol.TMap _map724 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.value = new HashMap<String,Map<String,String>>(2*_map724.size);
        String _key725;
        Map<String,String> _val726;
        for (int _i727 = 0; _i727 < _map724.size; ++_i727)
        {
          _key725 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map728 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _val726 = new HashMap<String,String>(2*_map728.size);
            String _key729;
            String _val730;
            for (int _i731 = 0; _i731 < _map728.size; ++_i731)
            {
              _key729 = iprot.readString();
              _val730 = iprot.readString();
              _val726.put(_key729, _val730);
            }
          }
          struct.value.put(_key725, _val726);
        }
      }
      struct.set_value_isSet(true);
    }
  }

}

